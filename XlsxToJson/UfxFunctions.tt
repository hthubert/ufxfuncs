<#@ template debug="false" hostspecific="false" language="C#" #>
<#@ output extension=".cs" #>
<#@ assembly name="System.Core" #>
<#@ assembly name="$(SolutionDir)ttlib\netstandard.dll" #>
<#@ assembly name="$(SolutionDir)ttlib\Newtonsoft.Json.dll" #>
<#@ assembly name="$(SolutionDir)ttlib\Humanizer.dll" #>
<#@ include file="Classes.ttinc"#>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="Newtonsoft.Json"#>
<#@ import namespace="System.IO" #>
<#@ import namespace="Humanizer" #>
<#@ import namespace="System.Text.RegularExpressions" #>
<#
    const string jsonPath = @"d:\work\github\ufxfuncs\XlsxToJson\bin\Debug\netcoreapp3.1";

    var functionPath = Path.Combine(jsonPath, "functions.json");
    var functions = JsonConvert.DeserializeObject<List<UfxFunction>>(File.ReadAllText(functionPath));
    functions.ForEach(n => n.InArgs.ForEach(arg => arg.TypeInfo = GetTypeInfo(arg.Type)));
    functions.ForEach(n => n.BusinessScope = GetGroupName(n.BusinessScope));
    var groups = functions
        .Where(n=>n.Code > 0)
        .GroupBy(n => n.BusinessScope)
        .Select(n => (n.Key, n.ToArray()));
#>
using System;
using hundsun.t2sdk;

namespace QuantBox.XApi
{
    <#
    foreach (var (name, items) in groups)
    {
#>
    public static class Ufx<#=name#>Function
    {
        <#
        foreach (var item in items)
        {
            var className = $"UfxPacker{item.Code}";
            var (args, summary, init) = GetFunctionInitInfo(item);
#>
        /// <summary>
        /// 功能名称: <#=item.Description#>
        /// </summary>
        <#=summary#>public static <#=className#> Make<#=item.Code#>(<#=args#>)
        {
            return new <#=className#>(<#=init#>);
        }
        <#
        }
        #>
    }
    <#
    } 
    #>
}
<#+
    private static (string args, string summary, string init) GetFunctionInitInfo(UfxFunction function)
    {
        var summary = new StringBuilder();
        var args = new StringBuilder();
        var init = new StringBuilder();
        foreach (var arg in function.InArgs)
        {
            if (arg.Required)
            {
                var name = arg.Name.Camelize();
                summary.AppendLine($"/// <param name=\"{name}\">{arg.Description}</param>");
                if (args.Length > 0)
                {
                    args.Append(", ");
                    init.Append(", ");
                }
                args.Append($"{arg.TypeInfo.CSharpType} {name}");
                init.Append($"{name}");
            }
        }
        return (args.ToString(), summary.ToString(), init.ToString());
    }

    private static string GetGroupName(string key)
    {
        switch (key)
        {
            case "证券":
                return "Securities";
            case "基金":
                return "Fund";
            case "期货":
                return "Futures";
            case "期权":
                return "Options";
            default:
                return "Account";
        }
    }
#>