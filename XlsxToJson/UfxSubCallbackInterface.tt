<#@ template debug="true" hostspecific="true" language="C#" #>
<#@ output extension=".cs" #>
<#@ assembly name="System.Core" #>
<#@ assembly name="$(SolutionDir)ttlib\netstandard.dll" #>
<#@ assembly name="$(SolutionDir)ttlib\Newtonsoft.Json.dll" #>
<#@ assembly name="$(SolutionDir)ttlib\Humanizer.dll" #>
<#@ include file="Classes.ttinc"#>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="Newtonsoft.Json"#>
<#@ import namespace="System.IO" #>
<#@ import namespace="Humanizer" #>
<#@ import namespace="System.Text.RegularExpressions" #>
<#
    var jsonPath = Host.ResolveAssemblyReference("$(ProjectDir)") + @"\bin\Debug\netcoreapp3.1";
    var functionPath = Path.Combine(jsonPath,"functions.json");
    var functions = JsonConvert.DeserializeObject<List<UfxFunction>>(File.ReadAllText(functionPath));
    functions.ForEach(n=>n.OutArgs.ForEach(arg=>arg.TypeInfo = GetTypeInfo(arg.Type)));
#>
using System;
using System.Collections.Generic;
using hundsun.mcapi;
using hundsun.t2sdk;

namespace QuantBox.XApi
{
    public class UfxSubCallbackInterface : CT2SubCallbackInterface
    {
        public override void OnRecvTickMsg(CT2SubscribeInterface lpSub, int subscribeIndex, string tickMsgInfo)
        {

        }

        public override unsafe void OnReceived(CT2SubscribeInterface lpSub, int subscribeIndex, void* lpData, int nLength, tagSubscribeRecvData lpRecData)
        {

        }
        
        public virtual void OnError(int errCode, string errMsg)
        {

        }

        public virtual void OnCallback(CT2SubscribeInterface lpSub, int subscribeIndex, sbyte msgType, CT2UnPacker unPacker, int dataIndex = 0)
        {
            switch (msgType)
            {
<#
    foreach (var function in functions.Where(n => n.MsgType > 0))
    {
        var className = $"Ufx{function.FunctionName}";
        var name = function.FunctionName;
        var msg = $"(sbyte)'{Convert.ToChar(function.MsgType).ToString()}'";
#>
                case <#=msg#>:                    
                    On<#=name#>(lpSub, subscribeIndex, <#=className#>.ReadAll(unPacker, dataIndex));
                    break;
<#
   }
#>
            }
        }

<#
    foreach (var function in functions.Where(n => n.MsgType > 0))
    {
        var className = $"Ufx{function.FunctionName}";
#>
        /// <summary>
        /// 业务范围: <#=function.BusinessScope#>
        /// 功能名称: <#=function.Description#>
        /// </summary>
        protected virtual void On<#=function.FunctionName#>(CT2SubscribeInterface lpSub, int subscribeIndex, <#=className#>[] data)
        {
            
        }        
<#
   }
#>
    }
}