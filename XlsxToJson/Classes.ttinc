<#@ template language="C#" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#+        
    public class TypeInfo
    {
        public string CSharpType;
        public string FieldType;
        public int Len;
        public int DecimalPartLen;
    }

    public class UfxFunctionArg
    {
        public string Name;
        public string Type;
        public TypeInfo TypeInfo;
        public string Description;
        public bool Required;
        public string Remark;
        public override string ToString()
        {
            return $"{Name},{Type},{Remark}";
        }
    }

    public class UfxFunction
    {
        public int Code;
        public sbyte MsgType;
        public int OldCode;
        public string UpdateDate;
        public string Name;
        public string FunctionName;
        public string Version;
        public bool HasDataSet;
        public string BusinessScope;
        public string InterfaceScope;
        public string RequestType;
        public string Status;
        public string Description;
        public readonly List<UfxFunctionArg> InArgs = new List<UfxFunctionArg>();
        public readonly List<UfxFunctionArg> OutArgs = new List<UfxFunctionArg>();
        public string BusinessDescription;
        public override string ToString()
        {
            if (Code == 0)
            {
                return $"消息推送:{MsgType},{Name},{Description}";
            }
            return $"功能接口:{Code},{Name},{FunctionName},{Description}";
        }
    }

    public class DataDictItem
    {
        public string Value;
        public string Description;
    }

    public class UfxDataDict
    {
        public string Key;
        public TypeInfo TypeInfo;
        public string Description;
        public string Name;
        public List<DataDictItem> Items = new List<DataDictItem>();
    }

    public class UfxErrorInfo
    {
        public int Code;
        public string Message;
        public string Remark;
    }

    private TypeInfo GetTypeInfo(string type)
    {
        var match = Regex.Match(type, @"([CN])(\d+)(\.(\d+))?");
        if (match.Success)
        {
            var len = int.Parse(match.Groups[2].Value);
            switch (match.Groups[1].Value)
            {
                case "C":
                    return len == 1 ? 
                        new TypeInfo { CSharpType = "sbyte", FieldType = "(sbyte)'C'", Len = len } : 
                        new TypeInfo { CSharpType = "string", FieldType = "(sbyte)'S'", Len = int.Parse(match.Groups[2].Value) };
                case "N":
                    if (match.Groups.Count > 2)
                    {
                        return new TypeInfo { CSharpType = "int", FieldType = "(sbyte)'I'", Len = len };
                    }
                    return new TypeInfo 
                    { 
                        CSharpType = "double", 
                        Len = len, 
                        FieldType = "(sbyte)'D'",
                        DecimalPartLen = int.Parse(match.Groups[4].Value)
                    };
            }
        }
        return new TypeInfo { CSharpType = "string", FieldType = "(sbyte)'S'", Len = 256 };
    }

    private static string GetDescription(UfxFunctionArg arg)
    {
        var line = new StringBuilder();
        line.Append(arg.Description);
        if (arg.Remark != null)
        {
            if (arg.Remark.Contains("数据字典") || arg.Remark.Contains("数据词典"))
            {
                var name = arg.Name.Replace("futu_", string.Empty).Replace("_list", string.Empty);
                line.Append($"(限定 <see cref=\"Ufx{name.Pascalize()}\"/> 中定义的常量)");
            }
            else
            {
                line.Append($"({arg.Remark})");
            }
        }
        return line.ToString();
    }
#>