<#@ template debug="false" hostspecific="true" language="C#" #>
<#@ output extension=".cs" #>
<#@ assembly name="System.Core" #>
<#@ assembly name="$(SolutionDir)ttlib\netstandard.dll" #>
<#@ assembly name="$(SolutionDir)ttlib\Newtonsoft.Json.dll" #>
<#@ assembly name="$(SolutionDir)ttlib\Humanizer.dll" #>
<#@ include file="Classes.ttinc"#>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="Newtonsoft.Json"#>
<#@ import namespace="System.IO" #>
<#@ import namespace="Humanizer" #>
<#@ import namespace="System.Text.RegularExpressions" #>
<#
    var jsonPath = Host.ResolveAssemblyReference("$(SolutionDir)") + @"XlsxToJson\bin\Debug\netcoreapp3.1";
    var functionPath = Path.Combine(jsonPath,"functions.json");
    var functions = JsonConvert.DeserializeObject<List<UfxFunction>>(File.ReadAllText(functionPath));
    functions.ForEach(n=>n.InArgs.ForEach(arg=>arg.TypeInfo = GetTypeInfo(arg.Type)));
#>
using System;
using hundsun.t2sdk;

namespace QuantBox.XApi
{
<#
    foreach (var function in functions.Where(n=> n.Code > 0))
    {
        var className = $"Ufx{function.Code}";
        var (args, summary, init) = GetFunctionInitInfo(function);
#>
    /// <summary>
    /// 功能号: <#=function.Code#>
    /// 功能名称: <#=function.Description#>
    /// 业务范围: <#=function.BusinessScope#>
    /// </summary>
    <#
        if (function.Status == "不维护")
        {
#>
    [Obsolete("不维护")]
<#
        } #>
    public sealed class <#=className#> : IUfxFunctionCall
    {
        /// <summary>
        /// 功能号
        /// </summary>
        public int FunctionId => <#=function.Code#>;
        /// <summary>
        /// 包含必选项的构造函数
        /// </summary>
        <#=summary#>public <#=className#>(<#=args#>)
        {
            <#=init#>}
<#
        foreach (var arg in function.InArgs)
        {
#>

        private <#=arg.TypeInfo.CSharpType#> _<#=arg.Name.Camelize()#>;
        private bool _<#=arg.Name.Camelize()#>Changed;
        /// <summary>
        /// <#=GetDescription(arg)#>
        /// </summary>
        public <#=arg.TypeInfo.CSharpType#> <#=arg.Name.Pascalize()#>
        {
            get => _<#=arg.Name.Camelize()#>;
            set {
                _<#=arg.Name.Camelize()#>Changed = true;
                _<#=arg.Name.Camelize()#> = value;
            }
        }
<#
            if (!arg.Required)
            {
#>
        public <#=className#> Set<#=arg.Name.Pascalize()#>(<#=arg.TypeInfo.CSharpType#> value)
        {
            <#=arg.Name.Pascalize()#> = value;
            return this;
        }
<#
            }
        }
#>
        /// <summary>
        /// 创建功能请求数据包
        /// </summary>
        /// <returns></returns>
        public CT2Packer Pack()
        {
            var packer = new CT2Packer(2);
            packer.BeginPack();
<#
        foreach (var arg in function.InArgs)
        {
#>
            if (_<#=arg.Name.Camelize()#>Changed)
            {
                packer.AddField("<#=arg.Name#>", <#=arg.TypeInfo.FieldType#>, <#=arg.TypeInfo.Len#>, 4);
            }
<#
        }
#>
<#
        foreach (var arg in function.InArgs)
        {
#>
            if (_<#=arg.Name.Camelize()#>Changed)
            {
                <#=GetPackerAdd(arg)#>;
            }
<#
        }
#>
            packer.EndPack();
            return packer;
        }
    }
<#
    }
#>
}
<#+
    private static (string args, string summary, string init) GetFunctionInitInfo(UfxFunction function)
    {
        var summary = new StringBuilder();
        var args = new StringBuilder();
        var init = new StringBuilder();
        foreach (var arg in function.InArgs)
        {
            if (arg.Required)
            {
                var name = arg.Name.Camelize();
                summary.AppendLine($"/// <param name=\"{name}\">{GetDescription(arg)}</param>");
                init.AppendLine($"{arg.Name.Pascalize()} = {arg.Name.Camelize()};");
                if (args.Length > 0)
                {
                    args.Append(", ");
                }
                args.Append($"{arg.TypeInfo.CSharpType} {name}");
            }
        }
        return (args.ToString(), summary.ToString(), init.ToString());
    }

    private static string GetPackerAdd(UfxFunctionArg arg)
    {
        var type = "Str";
        switch (arg.TypeInfo.CSharpType)
        {
            case "sbyte":
                type = "Char";
                break;
            case "int":
                type = "Int";
                break;
            case "double":
                type = "Double";
                break;
        }
        return $"packer.Add{type}(_{arg.Name.Camelize()})";
    }
#>