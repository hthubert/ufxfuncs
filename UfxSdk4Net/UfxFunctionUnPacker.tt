<#@ template debug="true" hostspecific="true" language="C#" #>
<#@ output extension=".cs" #>
<#@ assembly name="System.Core" #>
<#@ assembly name="$(SolutionDir)ttlib\netstandard.dll" #>
<#@ assembly name="$(SolutionDir)ttlib\Newtonsoft.Json.dll" #>
<#@ assembly name="$(SolutionDir)ttlib\Humanizer.dll" #>
<#@ include file="Classes.ttinc"#>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="Newtonsoft.Json"#>
<#@ import namespace="System.IO" #>
<#@ import namespace="Humanizer" #>
<#@ import namespace="System.Text.RegularExpressions" #>
<#
    var jsonPath = Host.ResolveAssemblyReference("$(SolutionDir)") + @"XlsxToJson\bin\Debug\netcoreapp3.1";
    var functionPath = Path.Combine(jsonPath,"functions.json");
    var functions = JsonConvert.DeserializeObject<List<UfxFunction>>(File.ReadAllText(functionPath));
    functions.ForEach(n=>n.OutArgs.ForEach(arg=>arg.TypeInfo = GetTypeInfo(arg.Type)));
#>
using System;
using System.Collections.Generic;
using hundsun.t2sdk;

namespace QuantBox.XApi
{
<#
    foreach (var function in functions.Where(n=> n.HasDataSet))
    {
        var className = function.Code > 0 ? $"Ufx{function.Code}Result" : $"Ufx{function.FunctionName}";
        var functionNum = function.Code > 0 ? function.Code.ToString() : Convert.ToChar(function.MsgType).ToString();
#>
    /// <summary>
    /// 功能标识: <#=functionNum#>
    /// 功能名称: <#=function.Description#>
    /// 业务范围: <#=function.BusinessScope#>
    /// </summary>
    public sealed class <#=className#> 
    {
<#
        foreach (var arg in function.OutArgs)
        {
#>
        /// <summary>
        /// <#=GetDescription(arg)#>
        /// </summary>
        public <#=arg.TypeInfo.CSharpType#> <#=arg.Name.Pascalize()#> { get; private set; }
<#
        }
#>
        public static <#=className#> ReadOne(CT2UnPacker result, int dataIndex = 1)
        {
            var data = ReadAll(result, dataIndex, true);
            if (data != null && data.Length > 0)
            {
                return data[0];
            }
            return null;
        }

        public static <#=className#>[] ReadAll(CT2UnPacker result, int dataIndex = 1, bool firstOnly = false)
        {
            var data = new List<<#=className#>>();
            if (result != null){
                result.SetCurrentDatasetByIndex(dataIndex);
                result.First();
                while (result.IsEOF() == 0) {                    
                    var item = new <#=className#>();
                    data.Add(item);
    <#
            foreach (var arg in function.OutArgs)
            {
    #>
                item.<#=arg.Name.Pascalize()#> = result.<#=GetPackReader(arg)#>;
    <#
            }#>
                if (firstOnly)
                    {
                        break;
                    }
                    result.Next();
                }
            }
            return data.ToArray();
        }
    }
<#
    }
#>
}
<#+
    private static string GetPackReader(UfxFunctionArg arg)
    {
        var type = "Str";
        switch (arg.TypeInfo.CSharpType)
        {
            case "sbyte":
                type = "Char";
                break;
            case "int":
                type = "Int";
                break;
            case "double":
                type = "Double";
                break;
        }
        return $"Get{type}(\"{arg.Name}\")";
    }
#>